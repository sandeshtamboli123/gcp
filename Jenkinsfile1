pipeline {

  environment {
    PROJECT_ID = 'devops-practice-277006'
    CLUSTER_NAME = 'inftfy-cluster'
    LOCATION = 'us-central1'
	CREDENTIALS_ID = 'multi-k8s'
  }

  agent {
    kubernetes {
      label 'jenkins-jenkins-agent'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
   - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true	
  nodeSelector:
    jk_role: slave
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: jk_role
            operator: In
            values:
            - slave
    tolerations:
    - key: "jk_role"
      operator: "Exists"
      effect: "NoSchedule"
"""
}
  }
  stages {
        stage("Workspace_cleanup"){
        //Cleaning WorkSpace
            steps{
               step([$class: 'WsCleanup'])
            } 
        }
		stage('Repo Clone'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                extensions: [], userRemoteConfigs: [[url:'https://github.com/sandeshtamboli123/gcp.git']]])
            }
        }
		stage("Build image") {
            steps {
                script {
                    myapp = docker.build("devops-practice-277006/sample-app")
                }
            }
        }
        stage("Push image") {
            steps {
                script {
                    docker.withRegistry('https://gcr.io',  'gcr:multi-k8s') {
                            myapp.push("latest")
                            myapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }        
        stage('Deploy to GKE') {
            steps{
			  container ('container') { 
                sh "kubectl apply -f  deployment.yaml"
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'deployment.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
              }
            }
       }
    }    
}    
                 
